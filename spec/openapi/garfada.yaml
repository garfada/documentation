openapi: 3.0.0
info:
  title: Garfada
  description: |
    API documentation to Garfada's server.
  version: 1.0.0
  license:
    name: MIT
  contact:
    email: garfada@protonmail.com
tags:
  - name: business
    description: aggregate all routes related to business resource
  - name: dish
    description: aggregate all routes related to dish resource
  - name: employee
    description: aggregate all routes related to employee resource
  - name: meal
    description: aggregate all routes related to meal resource
  - name: serve
    description: aggregate all routes related to serve resource
security:
  - JWT: []
servers:
  - url: https://api.garfada.example/v1
paths:
  /businesses:
    get:
      summary: "Get businesses"
      tags:
        - business
      parameters:
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
      responses:
        "200":
          description: "Success to get businesses"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500": 
          $ref: "#/components/responses/InternalErrorResponse"
    post:
      operationId: "1"
      summary: "Create a business"
      tags:
        - business
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessRequestModel"
      responses:
        "201":
          description: "Success create business"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessResponseModel"
        "401": 
          $ref: "#/components/responses/UnauthorizedResponse"
        "500": 
          $ref: "#/components/responses/InternalErrorResponse"
    put:
      summary: "Update a business"
      tags:
        - business
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessRequestModel"
      responses:
        "202":
          description: "Success update business"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500": 
          $ref: "#/components/responses/InternalErrorResponse"
    delete:
      summary: "Delete a business"
      tags:
        - business
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      responses:
        "204":
          description: "Success delete business"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500": 
          $ref: "#/components/responses/InternalErrorResponse"
  /employees:
    get:
      summary: "Get employees"
      tags:
        - employee
      parameters:
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
      responses:
        "200":
          description: "Success to get employees"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500": 
          $ref: "#/components/responses/InternalErrorResponse"
    post:
      summary: "Create a employee"
      tags:
        - employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeRequestModel"
      responses:
        "201":
          description: "Success create an employee"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
    put:
      summary: "Update a employee"
      tags:
        - employee
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeRequestModel"
      responses:
        "202":
          description: "Success update an employee"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500": 
          $ref: "#/components/responses/InternalErrorResponse"
    delete:
      summary: "Delete a employee"
      tags:
        - employee
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      responses:
        "204":
          description: "Success delete an employee"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500": 
          $ref: "#/components/responses/InternalErrorResponse"
  /dishes:
    get:
      summary: "Get dishes"
      tags:
        - dish
      parameters:
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
      responses:
        "200":
          description: "Success get dishs"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DishRequestModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
    post:
      summary: "Create a dish"
      tags:
        - dish
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DishRequestModel"
      responses:
        "201":
          description: "Success create business"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DishResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
    put:
      summary: "Update a dish"
      tags:
        - dish
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DishRequestModel"
      responses:
        "202":
          description: "Success update business"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DishResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
    delete:
      summary: "Delete a dish"
      tags:
        - dish
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      responses:
        "204":
          description: "Success delete business"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DishResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /meals:
    get:
      summary: "Get meals"
      tags:
        - meal
      parameters:
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
      responses:
        "200":
          description: "Success get meals"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MealRequestModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
    post:
      summary: "Create a meal"
      tags:
        - meal
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealRequestModel"
      responses:
        "201":
          description: "Success create a meal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
    put:
      summary: "Update a meal"
      tags:
        - meal
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MealRequestModel"
      responses:
        "202":
          description: "Success update a meal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
    delete:
      summary: "Delete a meal"
      tags:
        - meal
      parameters:
        - name: id
          schema:
            type: integer
            example: 0
          in: query
      responses:
        "204":
          description: "Success delete a meal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MealResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
  /serve:
    post:
      summary: "Assign a meal to a employee"
      tags:
        - serve
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServeRequestModel"
      responses:
        "201":
          description: "Success to assign a meal to employee"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServeResponseModel"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
components:
  parameters:
    from:
      name: from
      schema:
        type: integer
        example: 0
      in: query
    to:
      name: to
      schema:
        type: integer
        example: 10
      in: query
  schemas:
    BusinessRequestModel:
      type: object
      properties:
        code:
          type: string
          example: "00.000.000/0000-00"
        name:
          type: string
          example: "business"
    BusinessResponseModel:
      type: object
      properties:
        id:
          type: integer
          example: 0
        code:
          type: string
          example: "00.000.000/0000-00"
        name:
          type: string
          example: "business"
    EmployeeRequestModel:
      type: object
      properties:
        code:
          type: string
          example: "000.000.000-00"
        name:
          type: string
          example: "employee"
        business:
          type: integer
          example: 0
    EmployeeResponseModel:
      type: object
      properties:
        id:
          type: integer
          example: 0
        code:
          type: string
          example: "000.000.000-00"
        name:
          type: string
          example: "employee"
        business:
          type: integer
          example: 0
    DishRequestModel:
      type: object
      properties:
        name:
          type: string
          example: "dish"
        description:
          type: string
          example: "dish's description"
    DishResponseModel:
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: "dish"
        description:
          type: string
          example: "dish's description"
    MealRequestModel:
      type: object
      properties:
        name:
          type: string
          example: "meal"
        description:
          type: string
          example: "meal's description"
        dishes:
          type: array
          items:
            type: string
          example: ["1", "2", "3"]
    MealResponseModel:
      type: object
      properties:
        id:
          type: integer
          example: 0
        name:
          type: string
          example: "meal"
        description:
          type: string
          example: "meal's description"
        dishes:
          type: array
          items:
            type: string
          example: ["1", "2", "3"]
    ServeRequestModel:
      type: object
      properties:
        meal:
          type: integer
          example: 0
        employee:
          type: integer
          example: 0
    ServeResponseModel:
      type: object
      properties:
        id:
          type: integer
          example: 0
        meal:
          type: integer
          example: 0
        employee:
          type: integer
          example: 0
        date:
          type: string
          format: date-time
          example: "0000-00-00T00:00:00+00:00"
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
  responses:
    OkResponse:
      description: "Ok"
    UnauthorizedResponse:
      description: "Unauthorized"
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              message:
                type: string
                example: "unauthorized"
    InternalErrorResponse:
      description: "Internal error"
      content: 
        application/json:
          schema: 
            type: object
            properties: 
              message:
                type: string
                example: "internal error"